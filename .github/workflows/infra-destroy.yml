name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm infrastructure destruction'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-east-1

      # Step 3: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '>= 1.3.0'

      # Step 4: Validate destruction confirmation
      - name: Validate Destruction Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "destroy" ]; then
            echo "ERROR: You must input 'destroy' to confirm infrastructure destruction."
            exit 1
          fi

      # Step 5: Initialize Terraform with S3 backend
      - name: Initialize Terraform
        working-directory: infra
        run: |
          terraform init
        env:
          AWS_DEFAULT_REGION: ap-east-1

      # Step 6: Run infra_destroy.sh
      - name: Destroy Infrastructure
        run: |
          chmod +x scripts/infra_destroy.sh
          ./scripts/infra_destroy.sh
        env:
          AWS_DEFAULT_REGION: ap-east-1

      # Step 7: Verify cleanup
      - name: Verify Resource Cleanup
        run: |
          echo "Checking for remaining resources..."
          # Resource checks
          vpc_count=$(aws ec2 describe-vpcs --region ap-east-1 --filters Name=tag:Name,Values=telegram-bot-vpc --query 'Vpcs | length(@)' --output text)
          rds_count=$(aws rds describe-db-instances --region ap-east-1 --db-instance-identifier telegram-bot-db --query 'DBInstances | length(@)' --output text 2>/dev/null || echo 0)
          ecs_count=$(aws ecs list-clusters --region ap-east-1 --query 'clusterArns | length(@)' --output text)
          ecr_count=$(aws ecr describe-repositories --region ap-east-1 --repository-names telegram-bot --query 'repositories | length(@)' --output text 2>/dev/null || echo 0)
          secrets_count=$(aws secretsmanager list-secrets --region ap-east-1 --query 'SecretList[?starts_with(Name, `telegram-bot/`)] | length(@)' --output text)
          
          # Backend resource checks
          s3_bucket=$(aws s3api list-buckets --query "Buckets[?Name=='ai-chat-bot-terraform-state'].Name | length(@)" --output text)
          dynamodb_table=$(aws dynamodb list-tables --region ap-east-1 --query "TableNames[?@=='terraform-locks'] | length(@)" --output text)
          
          echo "VPCs: $vpc_count"
          echo "RDS Instances: $rds_count"
          echo "ECS Clusters: $ecs_count"
          echo "ECR Repositories: $ecr_count"
          echo "Secrets: $secrets_count"
          echo "S3 Backend Bucket: $s3_bucket"
          echo "DynamoDB Lock Table: $dynamodb_table"
          
          if [ "$vpc_count" -gt 0 ] || [ "$rds_count" -gt 0 ] || [ "$ecs_count" -gt 0 ] || \
             [ "$ecr_count" -gt 0 ] || [ "$secrets_count" -gt 0 ] || [ "$s3_bucket" -gt 0 ] || \
             [ "$dynamodb_table" -gt 0 ]; then
            echo "ERROR: Some resources still exist. Manual cleanup may be required."
            exit 1
          else
            echo "All resources successfully destroyed."
          fi
        env:
          AWS_DEFAULT_REGION: ap-east-1